// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String     @id @default(uuid())
  name             String
  email            String     @unique
  phonenumber      String?
  password         String
  role             Role       @default(EMPLOYEE)
  department       String
  createdAt        DateTime   @default(now())
  createdTrainings Training[] @relation("CreatedTrainings")
  enrollments TrainingEnrollment[]
  feedbacks   TrainingFeedback[]   @relation("EmployeeFeedbacks")
}

model Training {
  id                String       @id @default(uuid())
  title             String
  description       String
  mode              TrainingMode
  platform          String? // for ONLINE
  location          String? // for OFFLINE
  latitude          Float? // for google maps 
  longitude         Float? // for google maps 
  startDate         DateTime
  endDate           DateTime
  totalRating       Float?       @default(0)
  totalParticipants Int?         @default(0)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  createdBy         User         @relation("CreatedTrainings", fields: [createdById], references: [id])
  createdById       String
  enrollments TrainingEnrollment[]
  feedbacks   TrainingFeedback[]   @relation("TrainingFeedbacks")
}

model TrainingEnrollment {
  id         String         @id @default(uuid())
  employee   User           @relation(fields: [employeeId], references: [id])
  training   Training       @relation(fields: [trainingId], references: [id])
  employeeId String
  trainingId String
  status     TrainingStatus @default(PENDING)
  enrolledAt DateTime       @default(now())

  @@unique([employeeId, trainingId])
}

model TrainingFeedback {
  id         String   @id @default(uuid())
  employee   User     @relation("EmployeeFeedbacks", fields: [employeeId], references: [id])
  training   Training @relation("TrainingFeedbacks", fields: [trainingId], references: [id])
  employeeId String
  trainingId String

  // Participant Information
  participantName  String
  // participantDesignation String
  department       String?
  modeOfAttendance String

  // Training Content & Structure Ratings 
  durationRating   Int
  paceRating       Int
  contentRating    Int
  relevanceRating  Int
  usefulnessRating Int
  confidenceRating Int

  // Trainer Ratings
  trainerKnowledgeRating   Int
  trainerExplanationRating Int
  trainerAnswersRating     Int
  trainerUtilityRating     Int
  trainerInformationRating Int

  // Open-ended Comments
  trainingLikes          String?
  trainingImprovements   String?
  trainerStrengths       String?
  trainerRecommendations String?

  // Metadata
  submittedAt DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Ensure one feedback per employee per training
  @@unique([employeeId, trainingId])
}

enum Role {
  EMPLOYEE
  HR_ADMIN
  ADMIN
}

enum TrainingStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum TrainingMode {
  ONLINE
  OFFLINE
}
